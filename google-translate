#!/bin/bash
# shellcheck disable=SC2046,SC2206

DEBUG=-D/dev/stderr\ -v
DEBUG=

if [[ -z $google_tl_api_key ]]; then
	google_tl_api_key=$(< ~/.secrets/google/cli-translate-api-key)
fi

function translate_v2 {
	local f=$1 t=$2
	shift 2
	curl $DEBUG -X POST https://translation.googleapis.com/language/translate/v2 \
		-d q="$*" \
		-d source=$f \
		-d target=$t \
		-d key=$google_tl_api_key
}
function translate_word_from_cache {
	local f=$1 t=$2
	shift 2
	word="$*"
	if [[ ! -f ~/lib/words/$f-to-$t.glossary ]]; then
		echo ERROR unable to detect dict file\?: ~/lib/words/$f-to-$t.glossary >&2
	else
		cat ~/lib/words/$f-to-$t.glossary |
			awk -F^ -v ec=1 -v word="$word" '
				function ltrim(s) { sub(/^[ \t\r\n]+/, "", s); return s }
				function rtrim(s) { sub(/[ \t\r\n]+$/, "", s); return s }
				function trim(s) { return rtrim(ltrim(s)); }

				trim($1) == word { print trim($2); ec=0; exit(0); } END { exit(ec);} '
	fi
}

function detect_v2 {
	curl $DEBUG -X POST https://translation.googleapis.com/language/translate/v2/detect \
		-d key=$google_tl_api_key \
		-d q="$*"
}

function exit55error {
	local answers=$1
	if test true = `jq 'has("error")' <<< "$answers"`; then
		jq <<< "$answers"
		exit 55
	fi
}

_detect_confidence80() { jq -r '.data.detections[][]|select(.confidence > 0.8 ) | .language'; }
_translated_first() { jq -r '.data.translations[0].translatedText'; }

declare -a args=()
dst=en
default_to=no
default_to=de
#src=no

for i; do
	#if [[ -n $dashdash ]]; then text=$@ fi
	case $i in
			#--) dashdash=1 ;;
			no|nor) dst=no ;;
			ru|rus) dst=ru ;;
			de) dst=de ;;
			en) dst=en ;;
			t=*|to=*|dst=*|d=*) dst=${i:2} ;;
			f=*|from=*|src=*|s=*) src=${i:2} ;;
			*) args+=( $i ) ;;
	esac
	shift
done

if [[ $dst == en ]] && [[ $src == en ]]; then
	dst=no
fi


##
## single word
##
#if [[ ${#args[@]} -eq 1 ]]; then
if [[ ${#args[@]} -ge 1 ]]; then

	#word=${args[0]}
	word=${args[*]}

	: detect from language if not given
	if [[ -z $src ]]; then
		answers=$(detect_v2 $word)
		exit55error "$answers"
		src=$(echo "$answers" | _detect_confidence80)
		if [[ $src = $dst ]]; then
			dst=$default_to
		fi
		if [[ -z $src ]]; then
			echo "$answers" | jq
			echo cannot detect source language reliably
			exit 33
		fi
	fi

	: look up from local cache file
	result=$(translate_word_from_cache $src $dst $word)
	translation=$result

	# ask google for translation
	if [[ -z $result ]]; then
		result=$(translate_v2 $src $dst $word)
		translation=$(echo "$result" | _translated_first)

		exit55error "$result"

		# save translation
		if [[ -n $word ]] \
				&& [[ -n $translation ]] \
				&& [[ $translation != null ]] \
				&& [[ $translation != "$word" ]]; then
			mkdir -p ~/lib/words
			if [[ -v nosave ]] || [[ -v NOSAVE ]]; then
				:
			else
				echo $word ^ $translation >> ~/lib/words/$src-to-$dst.glossary
			fi
		fi
	fi

	echo $word ^ $translation "($src -> $dst)"

fi


: '
todo:

- look up words that can not be guessed to belong to a language from exiting files
	$ tl Schuhregal
	cat: /home/jaroslav/lib/words/en-to-Schuhregal.glossary: No such file or directory
	curl: (22) The requested URL returned error: 400
	Schuhregal ^ null ( -> en)


'
