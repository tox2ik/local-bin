#!/bin/bash
#
# mark merlin (script)
#     http://marc.merlins.org/perso/btrfs/
#        post_2014-03-22_Btrfs-Tips_-Doing-Fast-
#        Incremental-Backups-With-Btrfs-Send-and-Receive.html
#
# clone everything to fresh btrf
#     https://github.com/mwilck/btrfs-clone
#
# check out
# - https://github.com/mwilck/btrfs-clone
# - https://github.com/Thomas-Tsai/partclone
#
# maybe read
# - https://helmundwalter.de/en/blog/next-gen-backup-with-btrfs-snapshots-for-root-fs-and-databases/#:~:text=Btrfs%20snapshots%20work%20on%20per,a%20backup%20job%20for%20each.
# - https://github.com/csirac2/snazzer/#snazzer

# sys-apps/util-linux (/bin/mountpoint)

if [[ $1 = ls ]]; then
	for i in /ss /G/rr; do sudo btrfs subvolume list -at --sort=path $i |  awk '{ print $(NF) }' ; done  |
	grep -e rr -e ss | grep -v FS_T
	exit 0
fi


if [[ $UID -ne 0 ]]; then
	echo sudo $0
	exit 1
fi

DEBUG=${DEBUG:-}

# set -x
set -o nounset
set -o errexit
set -o pipefail

die () {
    msg=$*
    trap '' ERR
    echo >&2
    echo "$msg" >&2
    # This is a fancy shell core dumper
	if echo $msg | grep -q 'Error line .* with status'; then
			line=`echo $msg | sed 's/.*Error line \(.*\) with status.*/\1/'`
			nl -ba $0 | grep -3 "\b$line\b" >&2
	fi
    exit 1
}
trap 'die "Error line $LINENO with status $?"' ERR
  
date=$(date +%Y-%m-%d)

mountpoint -q /ss    || mount /ss
mountpoint -q /G/rr  || mount /G/rr

mkdir -p /ss/$date /ss/last /G/rr/$date/

btrfs filesystem show /ss > /dev/null
btrfs filesystem show /G  > /dev/null

declare -A mp=(
	[/T]=T
	['/']=slash
	[/home]=home
)

for mount in ${!mp[@]}; do
	snap=${mp[$mount]}
	if [[ ! -e /ss/$date/$snap ]]; then
			btrfs subvolume snapshot -r $mount /ss/$date/$snap && 
					ln -snf ../$date/$snap /ss/last/$snap;
	fi
done

sync
for mount in ${!mp[@]}; do
	snap=${mp[$mount]}

	prev_local=$(ls -dv1 /ss/*/$snap | grep $(realpath /ss/last/$snap) -B1 | sed 1q)
	last_remote=$( { ls -dv1 /G/rr/*/$snap | tail -n1; } || echo seed)
	if [[ -n $DEBUG ]]; then
			printf "prev_local..:%30s\n" $prev_local
			printf "last_remote.:%30s\n" $last_remote
	fi
	if [[ ! -e /G/rr/$date/$snap ]]; then
			if [[ $last_remote == seed ]]; then
					set -x
					btrfs send                /ss/$date/$snap | btrfs receive /G/rr/$date/
			else
					set -x
					btrfs send -p $prev_local /ss/$date/$snap | btrfs receive /G/rr/$date/
			fi
			set +x
	else
		if [[ -n $DEBUG ]]; then
				date '+now.........:                  %Y-%m-%d (snapshot present)'
		fi
	fi
	if [[ -n $DEBUG ]]; then
			echo
	fi
done
umount /ss /G/rr
