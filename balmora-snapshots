#!/bin/bash
#
# Inspiration / etc
#
# - Mark Merlin (script)
#     http://marc.merlins.org/perso/btrfs/
#        post_2014-03-22_Btrfs-Tips_-Doing-Fast-
#        Incremental-Backups-With-Btrfs-Send-and-Receive.html
#
# - Martin Wilck
#   clone everything to fresh btrf: https://github.com/mwilck/btrfs-clone
#
# check out
# - https://github.com/mwilck/btrfs-clone
# - https://github.com/Thomas-Tsai/partclone
#
# maybe read
# - https://helmundwalter.de/en/blog/next-gen-backup-with-btrfs-snapshots-for-root-fs-and-databases/#:~:text=Btrfs%20snapshots%20work%20on%20per,a%20backup%20job%20for%20each.
# - https://github.com/csirac2/snazzer/#snazzer
#
# Dependencies
#
# - sys-apps/util-linux (/bin/mountpoint)

if [[ $USER != root ]]; then
	exec sudo $0 "$@"
fi


mountpoint -q /ss    || mount /ss   || exit 124
mountpoint -q /B/rr  || mount /B/rr || exit 124

if [[ $1 = ls ]]; then
	for i in /ss /B/rr; do sudo btrfs subvolume list -at --sort=path $i |  awk '{ print $(NF) }' ; done  |
	grep -e rr -e ss | grep -v FS_T
	exit 0
fi


if [[ $UID -ne 0 ]]; then
	echo sudo $0
	exit 1
fi

DEBUG=${DEBUG:-}

# set -x
set -o nounset
set -o errexit
set -o pipefail


die () {
	set +x
    msg=$*
    trap '' ERR
    echo >&2
    echo "$msg" >&2
    # This is a fancy shell core dumper
	if echo $msg | grep -q 'Error line .* with status'; then
			line=`echo $msg | sed 's/.*Error line \(.*\) with status.*/\1/'`
			nl -ba $0 | grep -3 "\b$line\b" >&2
	fi
	touch ~/__________________CHECK_BACKUPS__.$(date +%Y-%m-%d).balmora-snapshots
	if [ -o errexit ]
	then
			exit 55
	fi
}
trap 'die "Error line $LINENO with status $?"' ERR

ymd=$(date +%Y-%m-%d)


mkdir -p /ss/$ymd /ss/last /B/rr/$ymd

btrfs filesystem show /ss   > /dev/null || exit 124
btrfs filesystem show /B/rr > /dev/null || exit 124

declare -A mp=(
	[/T]=T
	['/']=slash
	[/home]=home
	[/srv]=srv
)

##
## Create daily snapshots to avoid losing data
##
for mount in ${!mp[@]}; do
	snap=${mp[$mount]}
	if [[ ! -e /ss/$ymd/$snap ]]; then
			[[ -n $DEBUG ]] && echo b s snap-r $mount /ss/$ymd/$snap
			btrfs subvolume snapshot -r $mount /ss/$ymd/$snap &&
					ln -snf ../$ymd/$snap /ss/last/$snap;
		else
			[[ -n $DEBUG ]] && echo have /ss/$ymd/$snap
	fi
done
sync


##
## Send snapshots to a secondary volume for redundancy
##
for mount in ${!mp[@]}; do
	snap=${mp[$mount]}

	#prev_local=$(ls -dv1 /ss/*/$snap | grep $(realpath /ss/last/$snap) -B1 | sed 1q)
	prev_local=$( printf "%s\n" /ss/*/$snap | sort | grep $(realpath /ss/last/$snap) -B1 | sed 1q)
	last_remote=$( { ls -dv1 /B/rr/*/$snap | tail -n1; } || echo seed)

	if [[ -n $DEBUG ]]; then
			printf "prev_local..:%30s\n" $prev_local
			printf "last_remote.:%30s\n" $last_remote
	fi

	if [[ ! -e /B/rr/$ymd/$snap ]]; then
			if [[ $last_remote == seed ]]; then
					#set -x
					btrfs send                /ss/$ymd/$snap | btrfs receive /B/rr/$ymd/
			else
					rr=/tmp/backups.err.$$
					echo RR $rr
					declare -a ps=()

					function incremental {
						#set -x
						echo ":ienr: btrfs send -v -p $prev_local /ss/$ymd/$snap | btrfs receive -v /B/rr/$ymd "
						btrfs send -v -p $prev_local /ss/$ymd/$snap 2>$rr | btrfs receive -v /B/rr/$ymd 2>$rr
						ps=( "${PIPESTATUS[@]}" )
						set +x
					}

					function reseed {
						if [[ ${ps[0]} -ne 0 ]]; then
							export DEBUG=1
							echo -e "\e[33;01m"
							echo -e "remote end failed  ${ps[0]}"
							echo -e "\e[0m"
							eval $(grep -oE '[a-z_]+=[0-9a-z-]+' $rr)
							#... if ${ps[0]} == 141
							parent=$(btrfs subvolume list -sru /ss \
										|  awk -v u=$parent_uuid  '$(NF-2) == u { print $NF }')
							#set -x
							parent_date=${parent%%/*}
							echo ":reseed: btrfs send /ss/$parent | btrfs receive /B/rr/$parent_date/"
							mkdir -p /B/rr/$parent_date
							btrfs send /ss/$parent | btrfs receive /B/rr/$parent_date/
							set +x
							incremental
							exit ${ps[0]}
						fi
					}

					set +o errexit
					incremental
					reseed
					set -o errexit
			fi
			set +x
	else
		if [[ -n $DEBUG ]]; then
				date '+present.....:              %Y-%m-%d (snapshot exists)'
		fi
	fi
	if [[ -n $DEBUG ]]; then
			echo
	fi
done
umount /ss /B/rr
