#!/bin/bash

# what?
# lists files after folders like windoze explorer
# this is somewhat obsolete with a recent version of coreutils as ls now 
# supports --group-directories-first
# 
#
# bugs: 
#    - <> in filename
#    - device files are missing
# 
# files named e.g -l (valid parameters)



function trim {
    local var="$@"
	#$ var="  hello space    "
	#$ echo "<<${var%%[![:space:]]*}>>"
	#$ <<  >>

    var="${var#"${var%%[![:space:]]*}"}" # rm leading whitespace characters
    var="${var%"${var##*[![:space:]]}"}" # rm trailing whitespace characters

    var="${var#"${var%%[![\\0]*}"}" # rm leading nulls characters
    var="${var%"${var##*[![\\0]}"}" # rm trailing nulls characters
    echo -n "$var"
}

function arrayContains {
	# remove the shortest needle from array and compare lengths
	# needs more testing...
	declare -a array
	declare -a arrayLess
	declare needle
	array=( "${!1}" ); shift 		# expand the passed array name
	needle="$@"						# try to match the rest as a string
	arrayLess=( `trim "${array[@]#${needle}}"` )	# remove value $needle
	if [ ${#array[@]} -eq 0 ];then 					return 1 ;fi
	if [ ${#array[@]} -eq ${#arrayLess[@]} ];then	return 1 ;fi
	if [ ${#array[@]} -lt ${#arrayLess[@]} ];then	return 1 ;fi
	return 0
}

# d dir f file p named pipe (FIFO) l sylink s socket D door (Solaris) 
# c character (unbuffered) special b block (buffered) special

function finddirs {
	# mindepth 1 excludes the . directory
	$FIND "$@" \
		-mindepth 1 -maxdepth 1 -depth -type d \
		-printf '%f\0'
}

function findfiles {
	find "$@" \
		-maxdepth 1 -depth -type f \
		-printf "%f\0"
}

function findspecials {
	find "$@" \
		-maxdepth 1 -depth \( -type l   -o -type p  -o -type s -o -type b -o -type c \) \
		-printf "%f\0"
}

# bug: ls -[aA] will never work
function filter_out_hidden {
	grep -zv '^\..*' 
}

##
## vars and such
##
validswitches=(-X -l -r -t -C -F -1 -a -A -d -s)
PATHS=()
FPATHS=""
LSSWITCHES=""
LS=ls\ --color=auto
FIND=/usr/bin/find

ARG=$1
ARGC=0
while [ "$ARG" != "" ];
do
	if [ `arrayContains validswitches[@] $ARG ;echo $?` -eq 0 ];then
		LSSWITCHES="${LSSWITCHES} $ARG"
		unset ARG
	fi
	
	if [ -d "$ARG" ];then
		#PATHS="${PATHS} $ARG"
		PATHS[${ARGC}]=$ARG
		let ARGC=ARGC+1
	else
		FPATHS="${FPATHS}\0$ARG"
	fi
	shift
	ARG=$1
done

#PATHS=`trim $PATHS`
FPATHS=`trim "$FPATHS"`

if [ ${#FPATHS} -eq 0 ]; then 
	if [ ${#PATHS[@]} -eq 0 ]; then
		PATHS=(".")
	fi
fi
for arg in "${PATHS[@]}";
do
	if [[ ${#arg} -eq 1 && "$arg" == "/" ]];then 
		p=/
	else
		#p=${arg%%/}
		p=$arg
	fi

	( cd "$p"

		if [[ "$p" != "." && "$p" != "./" ]];then echo "$p": ;fi
		finddirs     | filter_out_hidden | xargs -r0 $LS $LSSWITCHES -d --
		findfiles    | filter_out_hidden | xargs -r0 $LS $LSSWITCHES --
		findspecials | filter_out_hidden | xargs -r0 $LS $LSSWITCHES -d --
		[ ${#PATHS[@]} -gt 1 ] && echo
	)
done

if [ -n "$FPATHS" ]; then
	echo -ne "$FPATHS\0" | xargs -0 -r $LS $LSSWITCHES --
fi 

